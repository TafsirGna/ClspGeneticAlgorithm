package main;

import java.util.ArrayList;
import java.util.Set;

public class Node {

    public double[] score;
    public double games;
    public Move move;
    public ArrayList<Node> unvisitedChildren;
    public ArrayList<Node> children;
    public Set<Integer> rVisited;
    public Node parent;
    public int player;
    public double[] pess;
    public double[] opti;
    public boolean pruned;
    public double[][] infoTab;
    public int number;
    public char[][] pieces;

    /**
     * This creates the root node
     *
     * @param b
     */
    public Node(Board b) {
        children = new ArrayList<Node>();
        player = b.getCurrentPlayer();
        score = new double[2];
        pess = new double[2];
        opti = new double[2];
        infoTab = new double[4][(b.number - 1) * 2 + 1];
        number = b.number;
        pieces = b.makeTab();
        for (int i = 0; i < 2; i++) {
            opti[i] = 1;
        }
        compute();
    }

    public void printinfo() {

        for (double[] t : infoTab) {
            for (double u : t) {
                System.out.print(u + "\t|");
            }
            System.out.println("\n");
        }
    }

    /**
     * This creates non-root nodes
     *
     * @param b
     * @param m
     * @param prnt
     */
    public Node(Board b, Move m, Node prnt) {
        children = new ArrayList<Node>();
        parent = prnt;
        move = m;
        Board tempBoard = b.duplicate();
        tempBoard.makeMove(m);
        player = tempBoard.getCurrentPlayer();
        score = new double[2];
        pess = new double[2];
        opti = new double[2];
        infoTab = new double[4][(b.number - 1) * 2 + 1];
        number = b.number;
        pieces = b.makeTab();
        for (int i = 0; i < 2; i++) {
            opti[i] = 1;
        }
        compute();
    }

    /**
     * Return the upper confidence bound of this state
     *
     * @param c typically sqrt(2). Increase to emphasize exploration. Decrease
     * to incr. exploitation
     * @param t
     * @return
     */
    public double upperConfidenceBound(double c) {
        return score[parent.player - 1] / games + c
                * Math.sqrt(2 * Math.log(parent.games) / games);
//                return score[parent.player-1] / games  + c * Math.sqrt(2 * Math.log(parent.games) / games);
//            return (parent.player == 1) ? nbun - nbdeux : nbdeux - nbun;
    }

    public double stateEvaluation() {
//            compute();
        double pos = 0, neg = 0;
        for (int i = 2; i < infoTab[0].length; i++) {
            pos += infoTab[0][i] * infoTab[1][i];
            neg += infoTab[2][i] * infoTab[3][i];
        }
        return pos - neg;

//		return (score[parent.player-1] / games + Math.sqrt(games))  + c
//				* Math.sqrt(Math.sqrt(parent.games + 1) / games);
//                return score[parent.player-1] / games  + c * Math.sqrt(2 * Math.log(parent.games) / games);
//            return (parent.player == 1) ? nbun - nbdeux : nbdeux - nbun;
    }

    /**
     * Update the tree with the new score.
     *
     * @param scr
     */
    public void backPropagateScore(double[] scr) {
        this.games++;
        for (int i = 0; i < scr.length; i++) {
            this.score[i] += scr[i];
        }

        if (parent != null) {
            parent.backPropagateScore(scr);
        }
    }

    /**
     * Expand this node by populating its list of unvisited child nodes.
     *
     * @param currentBoard
     */
    public void expandNode(Board currentBoard) {
        ArrayList<Move> legalMoves = currentBoard.getMoves(CallLocation.treePolicy);
        unvisitedChildren = new ArrayList<Node>();
        for (int i = 0; i < legalMoves.size(); i++) {
            Node tempState = new Node(currentBoard, legalMoves.get(i), this);
            unvisitedChildren.add(tempState);
        }
    }

    /**
     * Set the bounds in the given node and propagate the values back up the
     * tree. When bounds are first created they are both equivalent to a
     * player's score.
     *
     * @param optimistic
     * @param pessimistic
     */
    public void backPropagateBounds(double[] score) {
        for (int i = 0; i < score.length; i++) {
            opti[i] = score[i];
            pess[i] = score[i];
        }

        if (parent != null) {
            parent.backPropagateBoundsHelper();
        }
    }

    private void backPropagateBoundsHelper() {
        for (int i = 0; i < opti.length; i++) {
            if (i == player) {
                opti[i] = 0;
                pess[i] = 0;
            } else {
                opti[i] = 1;
                pess[i] = 1;
            }
        }

        for (int i = 0; i < opti.length; i++) {
            for (Node c : children) {
                if (i == player) {
                    if (opti[i] < c.opti[i]) {
                        opti[i] = c.opti[i];
                    }
                    if (pess[i] < c.pess[i]) {
                        pess[i] = c.pess[i];
                    }
                } else {
                    if (opti[i] > c.opti[i]) {
                        opti[i] = c.opti[i];
                    }
                    if (pess[i] > c.pess[i]) {
                        pess[i] = c.pess[i];
                    }
                }
            }
        }

		// This compares against a dummy node with bounds 1 0
        // if not all children have been explored
        if (!unvisitedChildren.isEmpty()) {
            for (int i = 0; i < opti.length; i++) {
                if (i == player) {
                    opti[i] = 1;
                } else {
                    pess[i] = 0;
                }
            }
        }

        // TODO: This causes redundant pruning. Fix it
        pruneBranches();
        if (parent != null) {
            parent.backPropagateBoundsHelper();
        }
    }

    public void pruneBranches() {
        for (Node s : children) {
            if (pess[player] >= s.opti[player]) {
                s.pruned = true;
            }
        }

        if (parent != null) {
            parent.pruneBranches();
        }
    }

    /**
     * Select a child node at random and return it.
     *
     * @param board
     * @return
     */
//	public int randomSelect(Board board) {
//		double []weights = board.getMoveWeights();
//		
//		double totalWeight = 0.0d;
//		for (int i = 0; i < weights.length; i++)
//		{
//		    totalWeight += weights[i];
//		}
//		
//		int randomIndex = -1;
//		double random = Math.random() * totalWeight;
//		for (int i = 0; i < weights.length; ++i)
//		{
//		    random -= weights[i];
//		    if (random <= 0.0d)
//		    {
//		        randomIndex = i;
//		        break;
//		    }
//		}
//		
//		//Node rNode = unvisitedChildren.get(randomIndex);
//		return randomIndex;
//	}
    public void compute() {
        char[][] t = this.pieces;
        for (int i = 0; i < t.length; i++) {
            checkRows(i, t);
            checkColumns(i, t);
//            checkColumn(2, t);
        }
        for (int i = 0; i < t.length; i++) {
            for (int j = 0; j < t.length; j++) {
                checkDiag(i, j, t);
            }
        }
        int ind = (number - 1) * 2 + 1;

        ind--;
        infoTab[1][ind] = 1000000;
        infoTab[3][ind] = 1000000;

        ind--;
        infoTab[1][ind] = 200;
        infoTab[3][ind] = 5020;

        ind--;
        infoTab[1][ind] = 80;
        infoTab[3][ind] = 1000;

        ind--;
        infoTab[1][ind] = 150;
        infoTab[3][ind] = 1010;

        int taill = (number - 2) * 2 - 1;
        double pas = 10 / taill;
        double tmp = pas;
        double[] val = new double[taill];
        int i = 0;
        val[i] = tmp;
        for (i = 0; i < taill - 1; i += 2) {
            tmp += pas;
            val[i + 2] = tmp;
            tmp += pas;
            val[i + 1] = tmp;
        }
        int j = 0;
        for (int k = 0; k < val.length; k++) {
            infoTab[1][j] = val[k];
            infoTab[3][j] = val[k];
            j++;
        }

    }

    private void checkRows(int row, char[][] t) {
        for (int i = 0; i < t.length; i++) {
            if (t[row][i] == ' ' || t[row][i] == ((player == 1) ? 'O' : 'X')) {
                continue;
            }
            if (i - 1 >= 0 && ((t[row][i - 1] == ((player == 1) ? 'X' : 'O')))) {//Simuler parent qui n'existe pas pour le premier noeud
                continue;
            }

            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
            int deb = 0, fini = 0;
            boolean ch = false;
            for (int u = i - 1; u >= 0; u--) {
                if (t[row][u] == ((player == 1) ? 'O' : 'X')) {
                    deb = u;
                    ch = true;
                    break;
                }
            }
            if (!ch) {
                deb = -1;
            }
            ch = false;
            for (int u = i + 1; u < t[0].length; u++) {
                if (t[row][u] == ((player == 1) ? 'O' : 'X')) {
                    fini = u;
                    ch = true;
                    break;
                }
            }
            if (!ch) {
                fini = t[0].length;
            }
            int plage = fini - deb - 1;
            if (plage < number) {
                continue;
            }
            /*Fin de vérification*/

            int nbre = 1, v1, v2;
            int saut = 0;
            for (v1 = i, v2 = i + 1; v2 < t.length;) {
                if ((t[row][v1] == t[row][v2])) {
                    nbre++;
                    if (v2 + 1 < t.length && ((t[row][v2] == t[row][v2 + 1]) || (t[row][v2 + 1] == ' '))) {
                        v1 = v2;
                        v2++;
                    } else {
                        break;
                    }
                } else if (t[row][v2] == ' ') {
                    saut++;
                    if (saut < 2) {
                        if (v2 + 1 < t.length) {
                            if (t[row][v1] == t[row][v2 + 1]) {
                                v2++;
                            } else {
                                v2--;
                                break;
                            }
                        } else {
                            v2--;
                            break;
                        }
                    } else {
                        v2--;
                        break;
                    }
                } else {
                    v2--;
                    break;
                }
            }
            int init = i;
            int fin = v2;
            if (nbre < 1 || nbre > number) {

            } else if (nbre == number) {
                boolean flag = false;
                for (int k = init; k < fin; k++) {
                    if (t[row][k] != t[row][k + 1]) {
                        flag = true;
                    }
                }
                if (!flag) {
                    infoTab[0][infoTab[0].length - 1] += 1;
                }
            } else {
                if (logicalXOR(init - 1 < 0 || ((init - 1 >= 0) && t[row][init - 1] == ((player == 1) ? 'O' : 'X')), fin + 1 >= t.length || ((fin + 1 < t.length) && t[row][fin + 1] == ((player == 1) ? 'O' : 'X')))) {
                    infoTab[0][(nbre - 1) * 2] += 1;
                } else if ((init - 1 < 0 || ((init - 1 >= 0) && t[row][init - 1] == ((player == 1) ? 'O' : 'X'))) && (fin + 1 >= t.length || ((fin + 1 < t.length) && t[row][fin + 1] == ((player == 1) ? 'O' : 'X')))) {
                    if (nbre == 4) {
                        for (int u = init; u <= fin; u++) {
                            if (t[row][u] == ' ') {
                                infoTab[0][(nbre - 1) * 2] += 1;
                                break;
                            }
                        }
                    }
                } else {
                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
                }
            }
        }

        /*%%%%%%%%%%%%%Adverse%%%%%%%%%%%%%%%%%*/
        for (int i = 0; i < t.length; i++) {
            if (t[row][i] == ' ' || t[row][i] == ((player == 1) ? 'X' : 'O')) {
                continue;
            }
            if (i - 1 >= 0 && ((t[row][i - 1] == ((player == 1) ? 'O' : 'X')))) {
                continue;
            }

            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
            int deb = 0, fini = 0;
            boolean ch = false;
            for (int u = i - 1; u >= 0; u--) {
                if (t[row][u] == ((player == 1) ? 'X' : 'O')) {
                    deb = u;
                    ch = true;
                    break;
                }
            }
            if (!ch) {
                deb = -1;
            }
            ch = false;
            for (int u = i + 1; u < t[0].length; u++) {
                if (t[row][u] == ((player == 1) ? 'X' : 'O')) {
                    fini = u;
                    ch = true;
                    break;
                }
            }
            if (!ch) {
                fini = t[0].length;
            }
            int plage = fini - deb - 1;
            if (plage < number) {
                continue;
            }
            /*Fin de vérification*/

            int nbre = 1, v1, v2;
            int saut = 0;
            for (v1 = i, v2 = i + 1; v2 < t.length;) {
                if ((t[row][v1] == t[row][v2])) {
                    nbre++;
                    if (v2 + 1 < t.length && ((t[row][v2] == t[row][v2 + 1]) || (t[row][v2 + 1] == ' '))) {
                        v1 = v2;
                        v2++;
                    } else {
                        break;
                    }
                } else if (t[row][v2] == ' ') {
                    saut++;
                    if (saut < 2) {
                        if (v2 + 1 < t.length) {
                            if (t[row][v1] == t[row][v2 + 1]) {
                                v2++;
                            } else {
                                v2--;
                                break;
                            }
                        } else {
                            v2--;
                            break;
                        }
                    } else {
                        v2--;
                        break;
                    }
                } else {
                    v2--;
                    break;
                }
            }
            int init = i;
            int fin = v2;
            if (nbre < 1 || nbre > number) {

            } else if (nbre == number) {
                boolean flag = false;
                for (int k = init; k < fin; k++) {
                    if (t[row][k] != t[row][k + 1]) {
                        flag = true;
                    }
                }
                if (!flag) {
                    infoTab[2][infoTab[0].length - 1] += 1;
                }
            } else {
                if (logicalXOR(init - 1 < 0 || ((init - 1 >= 0) && t[row][init - 1] == ((player == 1) ? 'X' : 'O')), fin + 1 >= t.length || ((fin + 1 < t.length) && t[row][fin + 1] == ((player == 1) ? 'X' : 'O')))) {
                    infoTab[2][(nbre - 1) * 2] += 1;
                } else if ((init - 1 < 0 || ((init - 1 >= 0) && t[row][init - 1] == ((player == 1) ? 'X' : 'O'))) && (fin + 1 >= t.length || ((fin + 1 < t.length) && t[row][fin + 1] == ((player == 1) ? 'X' : 'O')))) {
                    if (nbre == 4) {
                        for (int u = init; u <= fin; u++) {
                            if (t[row][u] == ' ') {
                                infoTab[2][(nbre - 1) * 2] += 1;
                                break;
                            }
                        }
                    }
                } else {
                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
                }
            }
        }
    }

    private void checkColumns(int column, char[][] t) {

//        Recherche des miens
        for (int i = 0; i < t.length; i++) {
            if (t[i][column] == ' ' || t[i][column] == ((player == 1) ? 'O' : 'X')) {
                continue;
            }
            if (i - 1 >= 0 && ((t[i - 1][column] == ((player == 1) ? 'X' : 'O')))) {
                continue;
            }

            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
            int deb = 0, fini = 0;
            boolean ch = false;
            for (int u = i - 1; u >= 0; u--) {
                if (t[u][column] == ((player == 1) ? 'O' : 'X')) {
                    deb = u;
                    ch = true;
                    break;
                }
            }
            if (!ch) {
                deb = -1;
            }
            ch = false;
            for (int u = i + 1; u < t.length; u++) {
                if (t[u][column] == ((player == 1) ? 'O' : 'X')) {
                    fini = u;
                    ch = true;
                    break;
                }
            }
            if (!ch) {
                fini = t.length;
            }
            int plage = fini - deb - 1;
            if (plage < number) {
                continue;
            }
            /*Fin de vérification*/

            int nbre = 1, v1, v2;
            int saut = 0;
            for (v1 = i, v2 = i + 1; v2 < t.length;) {
                if ((t[v1][column] == t[v2][column])) {
                    nbre++;
                    if (v2 + 1 < t.length && ((t[v2][column] == t[v2 + 1][column]) || (t[v2 + 1][column] == ' '))) {
                        v1 = v2;
                        v2++;
                    } else {
                        break;
                    }

                } else if (t[v2][column] == ' ') {
                    saut++;
                    if (saut < 2) {
                        if (v2 + 1 < t.length) {
                            if (t[v1][column] == t[v2 + 1][column]) {
                                v2++;
                            } else {
                                v2--;
                                break;
                            }
                        } else {
                            v2--;
                            break;
                        }
                    } else {
                        v2--;
                        break;
                    }
                } else {
                    v2--;
                    break;
                }
            }

            int init = i;
            int fin = v2;

            if (nbre < 1 || nbre > number) {

            } else if (nbre == number) {
                boolean flag = false;
                for (int k = init; k < fin; k++) {
                    if (t[k][column] != t[k + 1][column]) {
                        flag = true;
                    }
                }
                if (!flag) {
                    infoTab[0][infoTab[0].length - 1] += 1;
                }
            } else {
                if (logicalXOR(init - 1 < 0 || ((init - 1 >= 0) && t[init - 1][column] == ((player == 1) ? 'O' : 'X')), fin + 1 >= t.length || ((fin + 1 < t.length) && t[fin + 1][column] == ((player == 1) ? 'O' : 'X')))) {
                    infoTab[0][(nbre - 1) * 2] += 1;
                } else if ((init - 1 < 0 || ((init - 1 >= 0) && t[init - 1][column] == ((player == 1) ? 'O' : 'X'))) && (fin + 1 >= t.length || ((fin + 1 < t.length) && t[fin + 1][column] == ((player == 1) ? 'O' : 'X')))) {
                    if (nbre == 4) {
                        for (int u = init; u <= fin; u++) {
                            if (t[u][column] == ' ') {
                                infoTab[0][(nbre - 1) * 2] += 1;
                                break;
                            }
                        }
                    }
                } else {
                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
                }
            }
        }

//        Recherche des adversaires
        for (int i = 0; i < t.length; i++) {
            if (t[i][column] == ' ' || t[i][column] == ((player == 1) ? 'X' : 'O')) {
                continue;
            }
            if (i - 1 >= 0 && ((t[i - 1][column] == ((player == 1) ? 'O' : 'X')))) {
                continue;
            }

            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
            int deb = 0, fini = 0;
            boolean ch = false;
            for (int u = i - 1; u >= 0; u--) {
                if (t[u][column] == ((player == 1) ? 'X' : 'O')) {
                    deb = u;
                    ch = true;
                    break;
                }
            }
            if (!ch) {
                deb = -1;
            }
            ch = false;
            for (int u = i + 1; u < t.length; u++) {
                if (t[u][column] == ((player == 1) ? 'X' : 'O')) {
                    fini = u;
                    ch = true;
                    break;
                }
            }
            if (!ch) {
                fini = t.length;
            }
            int plage = fini - deb - 1;
            if (plage < number) {
                continue;
            }
            /*Fin de vérification*/

            int nbre = 1, v1, v2;
            int saut = 0;
            for (v1 = i, v2 = i + 1; v2 < t.length;) {
                if ((t[v1][column] == t[v2][column])) {
                    nbre++;
                    if (v2 + 1 < t.length && ((t[v2][column] == t[v2 + 1][column]) || (t[v2 + 1][column] == ' '))) {
                        v1 = v2;
                        v2++;
                    } else {
                        break;
                    }

                } else if (t[v2][column] == ' ') {
                    saut++;
                    if (saut < 2) {
                        if (v2 + 1 < t.length) {
                            if (t[v1][column] == t[v2 + 1][column]) {
                                v2++;
                            } else {
                                v2--;
                                break;
                            }
                        } else {
                            v2--;
                            break;
                        }
                    } else {
                        v2--;
                        break;
                    }
                } else {
                    v2--;
                    break;
                }
            }
            int init = i;
            int fin = v2;
            if (nbre < 1 || nbre > number) {

            } else if (nbre == number) {
                boolean flag = false;
                for (int k = init; k < fin; k++) {
                    if (t[k][column] != t[k + 1][column]) {
                        flag = true;
                    }
                }
                if (!flag) {
                    infoTab[2][infoTab[0].length - 1] += 1;
                }
            } else {
                if (logicalXOR(init - 1 < 0 || ((init - 1 >= 0) && t[init - 1][column] == ((player == 1) ? 'X' : 'O')), fin + 1 >= t.length || ((fin + 1 < t.length) && t[fin + 1][column] == ((player == 1) ? 'X' : 'O')))) {
                    infoTab[2][(nbre - 1) * 2] += 1;
                } else if ((init - 1 < 0 || ((init - 1 >= 0) && t[init - 1][column] == ((player == 1) ? 'X' : 'O'))) && (fin + 1 >= t.length || ((fin + 1 < t.length) && t[fin + 1][column] == ((player == 1) ? 'X' : 'O')))) {
                    if (nbre == 4) {
                        for (int u = init; u <= fin; u++) {
                            if (t[u][column] == ' ') {
                                infoTab[2][(nbre - 1) * 2] += 1;
                                break;
                            }
                        }
                    }
                } else {
                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
                }
            }
        }
    }

    private void checkDiag(int row, int column, char[][] t) {
        checkDiagBGs(row, column, t);

        checkDiagBDs(row, column, t);
    }

    private void checkDiagBDs(int row, int column, char[][] t) {
        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'O' : 'X')) {
        } else if ((row - 1 >= 0 && column - 1 >= 0) && ((t[row - 1][column - 1] == ((player == 1) ? 'X' : 'O')))) {
        } else {

            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
            int deb = 0, fini = 0;
            int z1 = row - 1, z2 = column - 1;
            while (z1 >= 0 && z2 >= 0) {
                if (t[z1][z2] != ((player == 1) ? 'O' : 'X')) {
                    deb++;
                } else {
                    break;
                }
                z1--;
                z2--;
            }

            z1 = row + 1;
            z2 = column + 1;
            while (z1 < t.length && z2 < t[0].length) {
                if (t[z1][z2] != ((player == 1) ? 'O' : 'X')) {
                    fini++;
                } else {
                    break;
                }
                z1++;
                z2++;
            }
            int plage = fini + deb + 1;
//            }
            if (plage < number) {
                return;
            }
            /*Fin de vérification*/

            int nbre = 1, v1, v2, v3, v4;
            int saut = 0;
            for (v1 = row, v2 = row + 1, v3 = column, v4 = column + 1; v2 < t.length && v4 < t.length;) {
                if ((t[v1][v3] == t[v2][v4])) {
                    nbre++;
                    if (v2 + 1 < t.length && v4 + 1 < t.length && ((t[v2][v4] == t[v2 + 1][v4 + 1]) || (t[v2 + 1][v4 + 1] == ' '))) {
                        v1 = v2;
                        v3 = v4;
                        v2++;
                        v4++;
                    } else {
                        break;
                    }

                } else if (t[v2][v4] == ' ') {
                    saut++;
                    if (saut < 2) {
                        if (v2 + 1 < t.length && v4 + 1 < t.length) {
                            if (t[v1][v3] == t[v2 + 1][v4 + 1]) {
                                v2++;
                                v4++;
                            } else {
                                saut--;
                                v2--;
                                v4--;
                                break;
                            }
                        } else {
                            saut--;
                            v2--;
                            v4--;
                            break;
                        }
                    } else {
                        v2--;
                        v4--;
                        break;
                    }
                } else {
                    v2--;
                    v4--;
                    break;
                }
            }

            if (nbre < 1 || nbre > number) {

            } else if (nbre == number) {
                boolean flag = false;
                int m = row, n = column;
                while (m < v2 && n < v4) {
                    if (t[m][n] != t[m + 1][n + 1]) {
                        flag = true;
                    }
                    m++;
                    n++;
                }
                if (!flag) {
                    infoTab[0][infoTab[0].length - 1] += 1;
                }
            } else {
                if (logicalXOR(row - 1 < 0 || column - 1 < 0 || ((row - 1 >= 0 && column - 1 >= 0) && t[row - 1][column - 1] == ((player == 1) ? 'O' : 'X')), v2 + 1 >= t.length || v4 + 1 >= t.length || ((v2 + 1 < t.length && v4 + 1 < t.length) && t[v2 + 1][v4 + 1] == ((player == 1) ? 'O' : 'X')))) {
                    infoTab[0][(nbre - 1) * 2] += 1;
                } else if ((row - 1 < 0 || column - 1 < 0 || ((row - 1 >= 0 && column - 1 >= 0) && t[row - 1][column - 1] == ((player == 1) ? 'O' : 'X'))) && (v2 + 1 >= t.length || v4 + 1 >= t.length || ((v2 + 1 < t.length && v4 + 1 < t.length) && t[v2 + 1][v4 + 1] == ((player == 1) ? 'O' : 'X')))) {
                    if (nbre == 4) {
                        int u = row, v = column;
                        while (u <= v2 && v <= v4) {
                            if (t[u][v] == ' ') {
                                infoTab[0][(nbre - 1) * 2] += 1;
                                break;
                            }
                            u++;
                            v++;
                        }
                    }
                } else {
                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
                }
            }

        }
        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'X' : 'O')) {
        } else if ((row - 1 >= 0 && column - 1 >= 0) && ((t[row - 1][column - 1] == ((player == 1) ? 'O' : 'X')))) {
        } else {

            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
            int deb = 0, fini = 0;
            int z1 = row - 1, z2 = column - 1;
            while (z1 >= 0 && z2 >= 0) {
                if (t[z1][z2] != ((player == 1) ? 'X' : 'O')) {
                    deb++;
                } else {
                    break;
                }
                z1--;
                z2--;
            }

            z1 = row + 1;
            z2 = column + 1;
            while (z1 < t.length && z2 < t[0].length) {
                if (t[z1][z2] != ((player == 1) ? 'X' : 'O')) {
                    fini++;
                } else {
                    break;
                }
                z1++;
                z2++;
            }
            int plage = fini + deb + 1;
            if (plage < number) {
                return;
            }
            /*Fin de vérification*/

            int nbre = 1, v1, v2, v3, v4;
            int saut = 0;
            for (v1 = row, v2 = row + 1, v3 = column, v4 = column + 1; v2 < t.length && v4 < t.length;) {
                if ((t[v1][v3] == t[v2][v4])) {
                    nbre++;
                    if (v2 + 1 < t.length && v4 + 1 < t.length && ((t[v2][v4] == t[v2 + 1][v4 + 1]) || (t[v2 + 1][v4 + 1] == ' '))) {
                        v1 = v2;
                        v3 = v4;
                        v2++;
                        v4++;
                    } else {
                        break;
                    }

                } else if (t[v2][v4] == ' ') {
                    saut++;
                    if (saut < 2) {
                        if (v2 + 1 < t.length && v4 + 1 < t.length) {
                            if (t[v1][v3] == t[v2 + 1][v4 + 1]) {
                                v2++;
                                v4++;
                            } else {
                                saut--;
                                v2--;
                                v4--;
                                break;
                            }
                        } else {
                            saut--;
                            v2--;
                            v4--;
                            break;
                        }
                    } else {
                        v2--;
                        v4--;
                        break;
                    }
                } else {
                    v2--;
                    v4--;
                    break;
                }
            }
            if (nbre < 1 || nbre > number) {

            } else if (nbre == number) {
                boolean flag = false;
                int m = row, n = column;
                while (m < v2 && n < v4) {
                    if (t[m][n] != t[m + 1][n + 1]) {
                        flag = true;
                    }
                    m++;
                    n++;
                }
                if (!flag) {
                    infoTab[2][infoTab[0].length - 1] += 1;
                }
            } else {
                if (logicalXOR(row - 1 < 0 || column - 1 < 0 || ((row - 1 >= 0 && column - 1 >= 0) && t[row - 1][column - 1] == ((player == 1) ? 'X' : 'O')), v2 + 1 >= t.length || v4 + 1 >= t.length || ((v2 + 1 < t.length && v4 + 1 < t.length) && t[v2 + 1][v4 + 1] == ((player == 1) ? 'X' : 'O')))) {
                    infoTab[2][(nbre - 1) * 2] += 1;
                } else if ((row - 1 < 0 || column - 1 < 0 || ((row - 1 >= 0 && column - 1 >= 0) && t[row - 1][column - 1] == ((player == 1) ? 'X' : 'O'))) && (v2 + 1 >= t.length || v4 + 1 >= t.length || ((v2 + 1 < t.length && v4 + 1 < t.length) && t[v2 + 1][v4 + 1] == ((player == 1) ? 'X' : 'O')))) {
                    if (nbre == 4) {
                        int u = row, v = column;
                        while (u <= v2 && v <= v4) {
                            if (t[u][v] == ' ') {
                                infoTab[2][(nbre - 1) * 2] += 1;
                                break;
                            }
                            u++;
                            v++;
                        }
                    }
                } else {
                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
                }
            }

        }
    }

    private void checkDiagBGs(int row, int column, char[][] t) {
        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'O' : 'X')) {
        } else if ((row - 1 >= 0 && column + 1 < t.length) && ((t[row - 1][column + 1] == ((player == 1) ? 'X' : 'O')))) {
        } else {

            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
            int deb = 0, fini = 0;
            int z1 = row - 1, z2 = column + 1;
            while (z1 >= 0 && z2 < t[0].length) {
                if (t[z1][z2] != ((player == 1) ? 'O' : 'X')) {
                    deb++;
                } else {
                    break;
                }
                z1--;
                z2++;
            }

            z1 = row + 1;
            z2 = column - 1;
            while (z1 < t.length && z2 >= 0) {
                if (t[z1][z2] != ((player == 1) ? 'O' : 'X')) {
                    fini++;
                } else {
                    break;
                }
                z1++;
                z2--;
            }
            int plage = fini + deb + 1;
            if (plage < number) {
                return;
            }
            /*Fin de vérification*/

            int nbre = 1, v1, v2, v3, v4;
            int saut = 0;
            for (v1 = row, v2 = row + 1, v3 = column, v4 = column - 1; v2 < t.length && v4 >= 0;) {
                if ((t[v1][v3] == t[v2][v4])) {
                    nbre++;
                    if (v2 + 1 < t.length && v4 - 1 >= 0 && ((t[v2][v4] == t[v2 + 1][v4 - 1]) || (t[v2 + 1][v4 - 1] == ' '))) {
                        v1 = v2;
                        v3 = v4;
                        v2++;
                        v4--;
                    } else {
                        break;
                    }

                } else if (t[v2][v4] == ' ') {
                    saut++;
                    if (saut < 2) {
                        if (v2 + 1 < t.length && v4 - 1 >= 0) {
                            if (t[v1][v3] == t[v2 + 1][v4 - 1]) {
                                v2++;
                                v4--;
                            } else {
                                v2--;
                                v4++;
                                break;
                            }
                        } else {
                            v2--;
                            v4++;
                            break;
                        }
                    } else {
                        v2--;
                        v4++;
                        break;
                    }
                } else {
                    v2--;
                    v4++;
                    break;
                }
            }
            if (nbre < 1 || nbre > number) {

            } else if (nbre == number) {
                boolean flag = false;
                int m = row, n = column;
                while (m < v2 && n > 0) {
                    if (t[m][n] != t[m + 1][n - 1]) {
                        flag = true;
                    }
                    m++;
                    n--;
                }
                if (!flag) {
                    infoTab[0][infoTab[0].length - 1] += 1;
                }
            } else {
                if (logicalXOR(row - 1 < 0 || column + 1 >= t.length || (((row - 1) >= 0 && (column + 1) < t.length) && t[row - 1][column + 1] == ((player == 1) ? 'O' : 'X')), v2 + 1 >= t.length || v4 - 1 < 0 || ((v2 + 1 < t.length && v4 - 1 >= 0) && t[v2 + 1][v4 - 1] == ((player == 1) ? 'O' : 'X')))) {
                    infoTab[0][(nbre - 1) * 2] += 1;
                } else if ((row - 1 < 0 || column + 1 >= t.length || (((row - 1) >= 0 && (column + 1) < t.length) && t[row - 1][column + 1] == ((player == 1) ? 'O' : 'X'))) && (v2 + 1 >= t.length || v4 - 1 < 0 || ((v2 + 1 < t.length && v4 - 1 >= 0) && t[v2 + 1][v4 - 1] == ((player == 1) ? 'O' : 'X')))) {
                    if (nbre == 4) {
                        int u = row, v = column;
                        while (u <= v2 && v >= v4) {
                            if (t[u][v] == ' ') {
                                infoTab[0][(nbre - 1) * 2] += 1;
                                break;
                            }
                            u++;
                            v--;
                        }
                    }
                } else {
                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
                }
            }

        }

        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'X' : 'O')) {
        } else if ((row - 1 >= 0 && column + 1 < t.length) && ((t[row - 1][column + 1] == ((player == 1) ? 'O' : 'X')))) {
        } else {

            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
            int deb = 0, fini = 0;
            int z1 = row - 1, z2 = column + 1;
            while (z1 >= 0 && z2 < t[0].length) {
                if (t[z1][z2] != ((player == 1) ? 'X' : 'O')) {
                    deb++;
                } else {
                    break;
                }
                z1--;
                z2++;
            }

            z1 = row + 1;
            z2 = column - 1;
            while (z1 < t.length && z2 >= 0) {
                if (t[z1][z2] != ((player == 1) ? 'X' : 'O')) {
                    fini++;
                } else {
                    break;
                }
                z1++;
                z2--;
            }
            int plage = fini + deb + 1;
            if (plage < number) {
                return;
            }
            /*Fin de vérification*/

            int nbre = 1, v1, v2, v3, v4;
            int saut = 0;
            for (v1 = row, v2 = row + 1, v3 = column, v4 = column - 1; v2 < t.length && v4 >= 0;) {
                if ((t[v1][v3] == t[v2][v4])) {
                    nbre++;
                    if (v2 + 1 < t.length && v4 - 1 >= 0 && ((t[v2][v4] == t[v2 + 1][v4 - 1]) || (t[v2 + 1][v4 - 1] == ' '))) {
                        v1 = v2;
                        v3 = v4;
                        v2++;
                        v4--;
                    } else {
                        break;
                    }

                } else if (t[v2][v4] == ' ') {
                    saut++;
                    if (saut < 2) {
                        if (v2 + 1 < t.length && v4 - 1 >= 0) {
                            if (t[v1][v3] == t[v2 + 1][v4 - 1]) {
                                v2++;
                                v4--;
                            } else {
                                v2--;
                                v4++;
                                break;
                            }
                        } else {
                            v2--;
                            v4++;
                            break;
                        }
                    } else {
                        v2--;
                        v4++;
                        break;
                    }
                } else {
                    v2--;
                    v4++;
                    break;
                }
            }
            if (nbre < 1 || nbre > number) {

            } else if (nbre == number) {
                boolean flag = false;
                int m = row, n = column;
                while (m < v2 && n > 0) {
                    if (t[m][n] != t[m + 1][n - 1]) {
                        flag = true;
                    }
                    m++;
                    n--;
                }
                if (!flag) {
                    infoTab[2][infoTab[0].length - 1] += 1;
                }
            } else {
                if (logicalXOR(row - 1 < 0 || column + 1 >= t.length || ((row - 1 >= 0 && column + 1 < t.length) && t[row - 1][column + 1] == ((player == 1) ? 'X' : 'O')), v2 + 1 >= t.length || v4 - 1 < 0 || ((v2 + 1 < t.length && v4 - 1 >= 0) && t[v2 + 1][v4 - 1] == ((player == 1) ? 'X' : 'O')))) {
                    infoTab[2][(nbre - 1) * 2] += 1;
                } else if ((row - 1 < 0 || column + 1 >= t.length || ((row - 1 >= 0 && column + 1 < t.length) && t[row - 1][column + 1] == ((player == 1) ? 'X' : 'O'))) && (v2 + 1 >= t.length || v4 - 1 < 0 || ((v2 + 1 < t.length && v4 - 1 >= 0) && t[v2 + 1][v4 - 1] == ((player == 1) ? 'X' : 'O')))) {
                    if (nbre == 4) {
                        int u = row, v = column;
                        while (u <= v2 && v >= v4) {
                            if (t[u][v] == ' ') {
                                infoTab[2][(nbre - 1) * 2] += 1;
                                break;
                            }
                            u++;
                            v--;
                        }
                    }
                } else {
                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
                }
            }

        }
    }

//    private void checkRow(int row, char[][] t) {
//        for (int i = 0; i < t.length; i++) {
//            if (t[row][i] == ' ' || t[row][i] == ((player == 1) ? 'O' : 'X')) {
//                continue;
//            }
//            if (i - 1 >= 0 && ((t[row][i - 1] == ((player == 1) ? 'X' : 'O')))) {//Simuler parent qui n'existe pas pour le premier noeud
//                continue;
//            }
//            int nbre = 1;
//            for (int j = i; j < t.length-1; j++) {
//                if ((t[row][j] != t[row][j + 1]) || t[row][j + 1] == ' ') {
//                    break;
//                } else {
//                    nbre++;
//                }
//            }
//            int init = i;
//            int fin = init + nbre - 1;
//            if (nbre < 1 || nbre >= number) {
//
//            }else{
//                if (logicalXOR(init - 1 < 0 || ((init-1>=0) && t[row][init - 1] == ((player == 1) ? 'O' : 'X')), fin + 1 >= t.length || ((fin+1<t.length) && t[row][fin + 1] == ((player == 1) ? 'O' : 'X')))) {
//                    infoTab[0][(nbre - 1) * 2] += 1;
//                } else if((init - 1 < 0 || ((init-1>=0) && t[row][init - 1] == ((player == 1) ? 'O' : 'X'))) && (fin + 1 >= t.length || ((fin+1<t.length) && t[row][fin + 1] == ((player == 1) ? 'O' : 'X')))){
//                }else {
//                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//        }
//        
//        for (int i = 0; i < t.length; i++) {
//            if (t[row][i] == ' ' || t[row][i] == ((player == 1) ? 'X' : 'O')) {
//                continue;
//            }
//            if (i - 1 >= 0 && ((t[row][i - 1] == ((player == 1) ? 'O' : 'X')))) {
//                continue;
//            }
//            int nbre = 1;
//            for (int j = i; j < t.length-1; j++) {
//                if ((t[row][j] != t[row][j + 1]) || t[row][j + 1] == ' ') {
//                    break;
//                } else {
//                    nbre++;
//                }
//            }
//            int init = i;
//            int fin = init + nbre - 1;
//            if (nbre < 1 || nbre >= number) {
//
//            }else{
//                if (logicalXOR(init - 1 < 0 || ((init-1>=0) && t[row][init - 1] == ((player == 1) ? 'X' : 'O')), fin + 1 >= t.length || ((fin+1<t.length) && t[row][fin + 1] == ((player == 1) ? 'X' : 'O')))) {
//                    infoTab[2][(nbre - 1) * 2] += 1;
//                }else if((init - 1 < 0 || ((init-1>=0) && t[row][init - 1] == ((player == 1) ? 'X' : 'O'))) && (fin + 1 >= t.length || ((fin+1<t.length) && t[row][fin + 1] == ((player == 1) ? 'X' : 'O')))){
//                }else {
//                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//        }
//    }
//    
//    
//    
//    private void checkRows(int row, char[][] t) {
//        for (int i = 0; i < t.length; i++) {
////            System.out.println("row = "+row+" i = "+i);
//            if (t[row][i] == ' ' || t[row][i] == ((player == 1) ? 'O' : 'X')) {
////                System.out.println("pas lui");
//                continue;
//            }
//            if (i - 1 >= 0 && ((t[row][i - 1] == ((player == 1) ? 'X' : 'O')))) {//Simuler parent qui n'existe pas pour le premier noeud
////                System.out.println("deja");
//                continue;
//            }
////            if(i-1 >= 0 && i-2 >= 0 && t[row][i - 1] == ' ' && (t[row][i - 2] == ((player == 1) ? 'X' : 'O'))){
////                continue;
////            }
////            System.out.println("bon");
//            
//            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
//            int deb = 0, fini = 0;
//            boolean ch = false;
//            for (int u = i-1; u >= 0; u--) {
//                if(t[row][u] == ((player == 1) ? 'O' : 'X')){
//                    deb = u;
//                    ch = true;
//                    break;
//                }
//            }
//            if(!ch)
//                deb = -1;
//            ch = false;
//            for (int u = i+1; u < t[0].length; u++) {
//                if(t[row][u] == ((player == 1) ? 'O' : 'X')){
//                    fini = u;
//                    ch = true;
//                    break;
//                }
//            }
//            if(!ch)
//                fini = t[0].length;
//            int plage = fini - deb - 1;
//            if(plage < number){
////                System.out.println("espae insuf");
//                continue;
//            }
//            /*Fin de vérification*/
////            System.out.println("espace suf");
//            
//            
////            int nbre = 1;
////            int saut = 0;
////            for (int v1 = i, v2 = i+1; v2 < t.length;) {
////                if ((t[row][v1] == t[row][v2])) {
////                    nbre++;
////                    v1 = v2;
////                    v2++;
////                } else if(t[row][v2] == ' '){
////                    saut++;
////                    v2++;
////                    if(saut == 2){
////                        saut = 0;
////                        System.out.println("bra");
////                        break;
////                    }
////                }else {
////                    System.out.println("bra");
////                    break;
////                }
////            }
//            int nbre = 1, v1, v2;
//            int saut = 0;
//            for (v1 = i, v2 = i+1; v2 < t.length;) {
////                System.out.println("v2 ="+v2);
//                if ((t[row][v1] == t[row][v2])) {
//                    nbre++;
//                    if(v2+1 < t.length && ( (t[row][v2] == t[row][v2+1]) || (t[row][v2+1] == ' ') )){
//                        v1 = v2;
//                        v2++;
//                    }
//                    else{
//                        break;
//                    }
//                        
//                } else if(t[row][v2] == ' '){
//                    saut++;
//                    if(saut < 2){
//                        if(v2+1 < t.length){
//                            if(t[row][v1] == t[row][v2+1]){
//                                v2++;
//                            }else{
//                                v2--;
//                                break;
//                            }
//                        }else{
//                            v2--;
//                            break;
//                        }
//                    }else{
//                        v2--;
//                        while(t[row][v2] != ' '){
//                            v2--;
//                        }
//                        v2--;
//                        break;
//                    }
//                }else {
//                    v2--;
//                    break;
//                }
//            }
//            int init = i;
//            int fin = v2;
////            int fin = init + nbre + saut - 1;
//            if (nbre < 1 || nbre > number) {
//
//            }else if(nbre == number){
//                boolean flag = false;
//                for(int k = init; k < fin; k++){
//                    if(t[row][k] != t[row][k+1])
//                        flag = true;
//                }
//                if(!flag)
//                    infoTab[0][infoTab[0].length-1] += 1;
//            }else{
//                if (logicalXOR(init - 1 < 0 || ((init-1>=0) && t[row][init - 1] == ((player == 1) ? 'O' : 'X')), fin + 1 >= t.length || ((fin+1<t.length) && t[row][fin + 1] == ((player == 1) ? 'O' : 'X')))) {
//                    infoTab[0][(nbre - 1) * 2] += 1;
//                } else if((init - 1 < 0 || ((init-1>=0) && t[row][init - 1] == ((player == 1) ? 'O' : 'X'))) && (fin + 1 >= t.length || ((fin+1<t.length) && t[row][fin + 1] == ((player == 1) ? 'O' : 'X')))){
//                }else {
//                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//        }
////        System.out.println("\n\n\n%%%%%%%%%%%%%Adverse%%%%%%%%%%%%%%%%%\n\n\n");
//        for (int i = 0; i < t.length; i++) {
////            System.out.println("row = "+row+" i = "+i);
//            if (t[row][i] == ' ' || t[row][i] == ((player == 1) ? 'X' : 'O')) {
////                System.out.println("pas lui");
//                continue;
//            }
//            if (i - 1 >= 0 && ((t[row][i - 1] == ((player == 1) ? 'O' : 'X')))) {
////                System.out.println("deja");
//                continue;
//            }
////            if(i-1 >= 0 && i-2 >= 0 && t[row][i - 1] == ' ' && (t[row][i - 2] == ((player == 1) ? 'O' : 'X'))){
////                continue;
////            }
////            System.out.println("bon");
//            
//            
//            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
//            int deb = 0, fini = 0;
//            boolean ch = false;
//            for (int u = i-1; u >= 0; u--) {
//                if(t[row][u] == ((player == 1) ? 'X' : 'O')){
//                    deb = u;
//                    ch = true;
//                    break;
//                }
//            }
//            if(!ch)
//                deb = -1;
//            ch = false;
//            for (int u = i+1; u < t[0].length; u++) {
//                if(t[row][u] == ((player == 1) ? 'X' : 'O')){
//                    fini = u;
//                    ch = true;
//                    break;
//                }
//            }
//            if(!ch)
//                fini = t[0].length;
//            int plage = fini - deb - 1;
//            if(plage < number){
////                System.out.println("espace insuf");
//                continue;
//            }
//            /*Fin de vérification*/
////            System.out.println("espace suf");
//            
//            
////            int nbre = 1;
////            int saut = 0;
////            for (int v1 = i, v2 = i+1; v2 < t.length;) {
////                if ((t[row][v1] == t[row][v2])) {
////                    nbre++;
////                    v1 = v2;
////                    v2++;
////                } else if(t[row][v2] == ' '){
////                    saut++;
////                    v2++;
////                    if(saut == 2){
////                        saut = 0;
////                        break;
////                    }
////                }else {
////                    break;
////                }
////            }
//            int nbre = 1, v1, v2;
//            int saut = 0;
//            for (v1 = i, v2 = i+1; v2 < t.length;) {
////                System.out.println("1");
//                if ((t[row][v1] == t[row][v2])) {
////                    System.out.println("2");
//                    nbre++;
//                    if(v2+1 < t.length && ( (t[row][v2] == t[row][v2+1]) || (t[row][v2+1] == ' ') )){
////                        System.out.println("3");
//                        v1 = v2;
//                        v2++;
//                    }
//                    else{
////                        System.out.println("4");
//                        break;
//                    }
//                } else if(t[row][v2] == ' '){
////                    System.out.println("5");
//                    saut++;
//                    if(saut < 2){
////                        System.out.println("6");
//                        if(v2+1 < t.length){
////                            System.out.println("7");
//                            if(t[row][v1] == t[row][v2+1]){
////                                System.out.println("8");
//                                v2++;
//                            }else{
////                                System.out.println("9");
//                                v2--;
////                                System.out.println("br");
//                                break;
//                            }
//                        }else{
////                            System.out.println("10");
//                            v2--;
////                            System.out.println("br");
//                            break;
//                        }
//                    }else{
////                        System.out.println("11");
//                        v2--;
//                        while(t[row][v2] != ' '){
//                            v2--;
//                        }
//                        v2--;
////                        System.out.println("br");
//                        break;
//                    }
//                }else {
////                    System.out.println("12");
//                    v2--;
////                    System.out.println("br");
//                    break;
//                }
//            }
//            int init = i;
//            int fin = v2;
//            //int fin = init + nbre + saut - 1;
//            if (nbre < 1 || nbre > number) {
//
//            }else if(nbre == number){
//                boolean flag = false;
//                for(int k = init; k < fin; k++){
//                    if(t[row][k] != t[row][k+1])
//                        flag = true;
//                }
//                if(!flag)
//                    infoTab[2][infoTab[0].length-1] += 1;
//            }else{
//                if (logicalXOR(init - 1 < 0 || ((init-1>=0) && t[row][init - 1] == ((player == 1) ? 'X' : 'O')), fin + 1 >= t.length || ((fin+1<t.length) && t[row][fin + 1] == ((player == 1) ? 'X' : 'O')))) {
//                    infoTab[2][(nbre - 1) * 2] += 1;
//                }else if((init - 1 < 0 || ((init-1>=0) && t[row][init - 1] == ((player == 1) ? 'X' : 'O'))) && (fin + 1 >= t.length || ((fin+1<t.length) && t[row][fin + 1] == ((player == 1) ? 'X' : 'O')))){
//                }else {
//                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//        }
//    }
//    
//    
//    
//
//    private void checkColumn(int column, char[][] t) {
////        System.out.println("colonne "+(column+1));
//        
////        System.out.println("Recherche des miens");
//        for (int i = 0; i < t.length; i++) {
////            System.out.println("debut i = "+i);
//            if (t[i][column] == ' ' || t[i][column] == ((player == 1) ? 'O' : 'X')) {
//                continue;
//            }
//            if (i - 1 >= 0 && ((t[i - 1][column] == ((player == 1) ? 'X' : 'O')))) {
//                continue;
//            }
//            int nbre = 1;
//            for (int j = i; j < t.length - 1; j++) {
////                System.out.println("roulement i = "+j);
//                if ((t[j][column] != t[j + 1][column]) || t[j + 1][column] == ' ') {
////                    System.out.println("j ="+j);
//                    break;
//                } else {
//                    nbre++;
//                }
//            }
////            System.out.println("nb = "+nbre);
//            int init = i;
//            int fin = init + nbre - 1;
//            if (nbre < 1 || nbre >= number) {
//
//            }else{
//                if (logicalXOR(init - 1 < 0 || ((init-1>=0) && t[init - 1][column] == ((player == 1) ? 'O' : 'X')), fin + 1 >= t.length || ((fin+1<t.length) && t[fin + 1][column] == ((player == 1) ? 'O' : 'X')))) {
////                    System.out.println("mi ouvert");
//                    infoTab[0][(nbre - 1) * 2] += 1;
//                } else if((init - 1 < 0 || ((init-1>=0) && t[init - 1][column] == ((player == 1) ? 'O' : 'X'))) && (fin + 1 >= t.length || ((fin+1<t.length) && t[fin + 1][column] == ((player == 1) ? 'O' : 'X')))){
//                }else {
////                    System.out.println("ouvert");
//                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//        }
//        
////        System.out.println("\n\nRecherche des adversaires");
//        for (int i = 0; i < t.length; i++) {
////            System.out.println("debut i = "+i);
//            if (t[i][column] == ' ' || t[i][column] == ((player == 1) ? 'X' : 'O')) {
//                continue;
//            }
//            if (i - 1 >= 0 && ((t[i - 1][column] == ((player == 1) ? 'O' : 'X')))) {
//                continue;
//            }
//            int nbre = 1;
//            for (int j = i; j < t.length - 1; j++) {
////                System.out.println("roulement i = "+j);
//                if ((t[j][column] != t[j + 1][column]) || t[j + 1][column] == ' ') {
////                    System.out.println("j ="+j);
//                    break;
//                } else {
//                    nbre++;
//                }
//            }
////            System.out.println("nb = "+nbre);
//            int init = i;
//            int fin = init + nbre - 1;
//            if (nbre < 1 || nbre >= number) {
//
//            }else{
//                if (logicalXOR(init - 1 < 0 || ((init-1>=0) && t[init - 1][column] == ((player == 1) ? 'X' : 'O')), fin + 1 >= t.length || ((fin+1<t.length) && t[fin + 1][column] == ((player == 1) ? 'X' : 'O')))) {
//                    infoTab[2][(nbre - 1) * 2] += 1;
//                } else if((init - 1 < 0 || ((init-1>=0) && t[init - 1][column] == ((player == 1) ? 'X' : 'O'))) && (fin + 1 >= t.length || ((fin+1<t.length) && t[fin + 1][column] == ((player == 1) ? 'X' : 'O')))){
//                }else {
//                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//        }
//    }
//    
//    
//    private void checkColumns(int column, char[][] t) {
////        System.out.println("colonne "+(column+1));
//        
////        System.out.println("Recherche des miens");
//        for (int i = 0; i < t.length; i++) {
//            //            System.out.println("debut i = "+i);
//            if (t[i][column] == ' ' || t[i][column] == ((player == 1) ? 'O' : 'X')) {
//                continue;
//            }
//            if (i - 1 >= 0 && ((t[i - 1][column] == ((player == 1) ? 'X' : 'O')))) {
//                continue;
//            }
////            if(i-1 >= 0 && i-2 >= 0 && t[i - 1][column] == ' ' && (t[i - 2][column] == ((player == 1) ? 'X' : 'O'))){
////                continue;
////            }
//            
//            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
//            int deb = 0, fini = 0;
//            boolean ch = false;
//            for (int u = i-1; u >= 0; u--) {
//                if(t[u][column] == ((player == 1) ? 'O' : 'X')){
//                    deb = u;
//                    ch = true;
//                    break;
//                }
//            }
//            if(!ch)
//                deb = -1;
//            ch = false;
//            for (int u = i+1; u < t.length; u++) {
//                if(t[u][column] == ((player == 1) ? 'O' : 'X')){
//                    fini = u;
//                    ch = true;
//                    break;
//                }
//            }
//            if(!ch)
//                fini = t.length;
//            int plage = fini - deb - 1;
//            if(plage < number)
//                continue;
//            /*Fin de vérification*/
//            
////            int nbre = 1;
////            int saut = 0;
////            for (int v1 = i, v2 = i+1; v2 < t.length;) {
//////                System.out.println("roulement i = "+j);
////                
////                if ((t[v1][column] == t[v2][column])) {
////                    nbre++;
////                    v1 = v2;
////                    v2++;
//////                    break;
////                } else if(t[v2][column] == ' '){
////                    saut++;
////                    v2++;
////                    if(saut == 2){
////                        saut = 0;
////                        break;
////                    }
////                }else {
////                    break;
////                }
////            }
////            System.out.println("nb = "+nbre);
//            
//            
//            int nbre = 1, v1, v2;
//            int saut = 0;
//            for (v1 = i, v2 = i+1; v2 < t.length;) {
//                if ((t[v1][column] == t[v2][column])) {
//                    nbre++;
//                    if(v2+1 < t.length && ( (t[v2][column] == t[v2+1][column]) || (t[v2+1][column] == ' ') )){
//                        v1 = v2;
//                        v2++;
//                    }
//                    else{
//                        break;
//                    }
//                        
//                } else if(t[v2][column] == ' '){
//                    saut++;
//                    if(saut < 2){
//                        if(v2+1 < t.length){
//                            if(t[v1][column] == t[v2+1][column]){
//                                v2++;
//                            }else{
//                                v2--;
//                                break;
//                            }
//                        }else{
//                            v2--;
//                            break;
//                        }
//                    }else{
//                        v2--;
//                        while(t[v2][column] != ' '){
//                            v2--;
//                        }
//                        v2--;
//                        break;
//                    }
//                }else {
//                    v2--;
//                    break;
//                }
//            }
//            
//            int init = i;
//            int fin = v2;
//            //int fin = init + nbre + saut - 1;
//            
//            if (nbre < 1 || nbre > number) {
//
//            }else if(nbre == number){
//                boolean flag = false;
//                for(int k = init; k < fin; k++){
//                    if(t[k][column] != t[k+1][column])
//                        flag = true;
//                }
//                if(!flag)
//                    infoTab[0][infoTab[0].length-1] += 1;
//            }else{
//                if (logicalXOR(init - 1 < 0 || ((init-1>=0) && t[init - 1][column] == ((player == 1) ? 'O' : 'X')), fin + 1 >= t.length || ((fin+1<t.length) && t[fin + 1][column] == ((player == 1) ? 'O' : 'X')))) {
////                    System.out.println("mi ouvert");
//                    infoTab[0][(nbre - 1) * 2] += 1;
//                } else if((init - 1 < 0 || ((init-1>=0) && t[init - 1][column] == ((player == 1) ? 'O' : 'X'))) && (fin + 1 >= t.length || ((fin+1<t.length) && t[fin + 1][column] == ((player == 1) ? 'O' : 'X')))){
//                }else {
////                    System.out.println("ouvert");
//                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//        }
//        
////        System.out.println("\n\nRecherche des adversaires");
//        for (int i = 0; i < t.length; i++) {
////            System.out.println("debut i = "+i);
//            if (t[i][column] == ' ' || t[i][column] == ((player == 1) ? 'X' : 'O')) {
//                continue;
//            }
//            if (i - 1 >= 0 && ((t[i - 1][column] == ((player == 1) ? 'O' : 'X')))) {
//                continue;
//            }
////            if(i-1 >= 0 && i-2 >= 0 && t[i - 1][column] == ' ' && (t[i - 2][column] == ((player == 1) ? 'O' : 'X'))){
////                continue;
////            }
//            
//            
//            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
//            int deb = 0, fini = 0;
//            boolean ch = false;
//            for (int u = i-1; u >= 0; u--) {
//                if(t[u][column] == ((player == 1) ? 'X' : 'O')){
//                    deb = u;
//                    ch = true;
//                    break;
//                }
//            }
//            if(!ch)
//                deb = -1;
//            ch = false;
//            for (int u = i+1; u < t.length; u++) {
//                if(t[u][column] == ((player == 1) ? 'X' : 'O')){
//                    fini = u;
//                    ch = true;
//                    break;
//                }
//            }
//            if(!ch)
//                fini = t.length;
//            int plage = fini - deb - 1;
//            if(plage < number)
//                continue;
//            /*Fin de vérification*/
//            
//            
////            int nbre = 1;
////            int saut = 0;
////            for (int v1 = i, v2 = i+1; v2 < t.length;) {
//////                System.out.println("roulement i = "+j);
////                
////                if ((t[v1][column] == t[v2][column])) {
////                    nbre++;
////                    v1 = v2;
////                    v2++;
//////                    break;
////                } else if(t[v2][column] == ' '){
////                    saut++;
////                    v2++;
////                    if(saut == 2){
////                        saut = 0;
////                        break;
////                    }
////                }else {
////                    break;
////                }
////            }
//            
//            int nbre = 1, v1, v2;
//            int saut = 0;
//            for (v1 = i, v2 = i+1; v2 < t.length;) {
//                if ((t[v1][column] == t[v2][column])) {
//                    nbre++;
//                    if(v2+1 < t.length && ( (t[v2][column] == t[v2+1][column]) || (t[v2+1][column] == ' ') )){
//                        v1 = v2;
//                        v2++;
//                    }
//                    else{
//                        break;
//                    }
//                        
//                } else if(t[v2][column] == ' '){
//                    saut++;
//                    if(saut < 2){
//                        if(v2+1 < t.length){
//                            if(t[v1][column] == t[v2+1][column]){
//                                v2++;
//                            }else{
//                                v2--;
//                                break;
//                            }
//                        }else{
//                            v2--;
//                            break;
//                        }
//                    }else{
//                        v2--;
//                        while(t[v2][column] != ' '){
//                            v2--;
//                        }
//                        v2--;
//                        break;
//                    }
//                }else {
//                    v2--;
//                    break;
//                }
//            }
////            System.out.println("nb = "+nbre);
//            int init = i;
//            int fin = v2;
//            //int fin = init + nbre +saut - 1;
//            if (nbre < 1 || nbre > number) {
//
//            }else if(nbre == number){
//                boolean flag = false;
//                for(int k = init; k < fin; k++){
//                    if(t[k][column] != t[k+1][column])
//                        flag = true;
//                }
//                if(!flag)
//                    infoTab[2][infoTab[0].length-1] += 1;
//            }else{
//                if (logicalXOR(init - 1 < 0 || ((init-1>=0) && t[init - 1][column] == ((player == 1) ? 'X' : 'O')), fin + 1 >= t.length || ((fin+1<t.length) && t[fin + 1][column] == ((player == 1) ? 'X' : 'O')))) {
//                    infoTab[2][(nbre - 1) * 2] += 1;
//                } else if((init - 1 < 0 || ((init-1>=0) && t[init - 1][column] == ((player == 1) ? 'X' : 'O'))) && (fin + 1 >= t.length || ((fin+1<t.length) && t[fin + 1][column] == ((player == 1) ? 'X' : 'O')))){
//                }else {
//                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//        }
//    }
//    
//    
//    private void checkDiag(int row, int column, char [][] t){
////        if(checkDiagHG(row, column, t)){
////            return true;
////        }
////        if(checkDiagHD(row, column, t)){
////            return true;
////        }
//        checkDiagBGs(row, column, t);
//        
//        checkDiagBDs(row, column, t);
//    }
//    
////    private boolean checkDiagHG(int row, int column, char[][] t) {
////        if(row >= number-1 && column >= number-1){
////            for (int i = column, j = row; i > column-number+1 && j > row-number+1; i--, j--) {
////                if ((t[j][i] != t[j - 1][i - 1]) || t[j][i] == ' ')
////                    return false;
////            }
////        }else{
////            return false;
////        }
////        return true;
////    }
//
////    private boolean checkDiagHD(int row, int column, char[][] t) {
////        if(row >= number-1 && t.length - column >= number){
////            for (int i = column, j = row; i < column+number-1 && j > row-number+1; i++, j--) {
////                if ((t[j][i] != t[j - 1][i + 1]) || t[j][i] == ' ')
////                    return false;
////            }
////        }else{
////            return false;
////        }
////        return true;
////    }
//
//    private void checkDiagBD(int row, int column, char[][] t) {
//        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'O' : 'X')) {
////                continue;
//        }
//        else if ((row-1 >= 0 && column-1 >= 0) && ((t[row - 1][column - 1] == ((player == 1) ? 'X' : 'O')))) {
////            continue;
//        }else{
//            int nbre = 1, i, j;
//            for (i = row, j = column; i < t.length-1 && j < t.length-1; i++, j++) {
//                if ((t[i][j] != t[i + 1][j + 1]) || t[i + 1][j + 1] == ' ') {
//                    break;
//                } else {
//                    nbre++;
//                }
//            }
//            if (nbre < 1 || nbre >= number) {
//
//            }else{
//                if (logicalXOR(row - 1 < 0 || column - 1 < 0 || ((row-1>=0 && column-1>=0) && t[row- 1][column - 1] == ((player == 1) ? 'O' : 'X')), i + 1 >= t.length || j + 1 >= t.length || ((i+1<t.length && j+1<t.length) && t[i + 1][j + 1] == ((player == 1) ? 'O' : 'X')))) {
//                    infoTab[0][(nbre - 1) * 2] += 1;
//                } else if((row - 1 < 0 || column - 1 < 0 || ((row-1>=0 && column-1>=0) && t[row- 1][column - 1] == ((player == 1) ? 'O' : 'X'))) && (i + 1 >= t.length || j + 1 >= t.length || ((i+1<t.length && j+1<t.length) && t[i + 1][j + 1] == ((player == 1) ? 'O' : 'X')))){
//                    
//                }else {
//                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//                
//        }
//        
//        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'X' : 'O')) {
////                continue;
//        }
//        else if ((row-1 >= 0 && column-1 >= 0) && ((t[row - 1][column - 1] == ((player == 1) ? 'O' : 'X')))) {
////            continue;
//        }else{
//            int nbre = 1, i, j;
//            for (i = row, j = column; i < t.length-1 && j < t.length-1; i++, j++) {
//                if ((t[i][j] != t[i + 1][j + 1]) || t[i + 1][j + 1] == ' ') {
//                    break;
//                } else {
//                    nbre++;
//                }
//            }
//            if (nbre < 1 || nbre >= number) {
//
//            }else{
//                if (logicalXOR(row - 1 < 0 || column - 1 < 0 || ((row-1>=0 && column-1>=0) && t[row- 1][column - 1] == ((player == 1) ? 'X' : 'O')), i + 1 >= t.length || j + 1 >= t.length || ((i+1<t.length && j+1<t.length) && t[i + 1][j + 1] == ((player == 1) ? 'X' : 'O')))) {
//                    infoTab[2][(nbre - 1) * 2] += 1;
//                } else if((row - 1 < 0 || column - 1 < 0 || ((row-1>=0 && column-1>=0) && t[row- 1][column - 1] == ((player == 1) ? 'X' : 'O'))) && (i + 1 >= t.length || j + 1 >= t.length || ((i+1<t.length && j+1<t.length) && t[i + 1][j + 1] == ((player == 1) ? 'X' : 'O')))){
//                    
//                }else {
//                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//        }
//    }
//    
//    
//    
//    
//    private void checkDiagBDs(int row, int column, char[][] t) {
////        if(row == 3 && column == 3){
////            System.out.println("eya");
////        }
//        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'O' : 'X')) {
////                continue;
////            if(row == 3 && column == 3){
////                System.out.println("pas lui");
////            }
//        }
//        else if ((row-1 >= 0 && column-1 >= 0) && ((t[row - 1][column - 1] == ((player == 1) ? 'X' : 'O')))) {
////            continue;
////            if(row == 3 && column == 3){
////                System.out.println("déjà pris");
////            }
//        }
////        else if(row - 1 >= 0 && column - 1 >= 0 && row - 2 >= 0 && column - 2 >= 0 && t[row - 1][column - 1] == ' ' && (t[row - 2][column - 2] == ((player == 1) ? 'X' : 'O'))){
////            
////        }
//        else{
//            
//            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
//            int deb = 0, fini = 0;
//            int z1 = row-1, z2 = column-1;
//            while (z1 >= 0 && z2 >= 0) {                
//                if(t[z1][z2] != ((player == 1) ? 'O' : 'X')){
//                    deb++;
//                }else{
//                    break;
//                }
//                z1--;
//                z2--;
//            }
//
//            z1 = row+1;
//            z2 = column+1;
//            while (z1 < t.length && z2 < t[0].length) {                
//                if(t[z1][z2] != ((player == 1) ? 'O' : 'X')){
//                    fini++;
//                }else{
//                    break;
//                }
//                z1++;
//                z2++;
//            }
//            int plage = fini + deb + 1;
////            if(row == 3 && column == 3){
////                System.out.println("row = "+row+" column = "+column);
////                System.out.println("propre plage = "+plage);
////                System.out.println("fin = "+fini+" debut = "+deb);
////            }
//            if(plage < number){
//                return;
//            }
//            /*Fin de vérification*/
//            
//            
//            int nbre = 1, v1, v2, v3, v4;
//            int saut = 0;
//            for (v1 = row, v2 = row+1, v3 = column, v4 = column+1; v2 < t.length && v4 < t.length;) {
//                if ((t[v1][v3] == t[v2][v4])) {
//                    nbre++;
//                    if(v2+1 < t.length && v4+1 < t.length && ( (t[v2][v4] == t[v2+1][v4+1]) || (t[v2+1][v4+1] == ' ') )){
//                        v1 = v2;
//                        v3 = v4;
//                        v2++;
//                        v4++;
//                    }
//                    else{
//                        break;
//                    }
//                        
//                } else if(t[v2][v4] == ' '){
//                    saut++;
//                    if(saut < 2){
//                        if(v2+1 < t.length && v4+1 < t.length){
//                            if(t[v1][v3] == t[v2+1][v4+1]){
//                                v2++;
//                                v4++;
//                            }else{
//                                saut--;
//                                v2--;
//                                v4--;
//                                break;
//                            }
//                        }else{
//                            saut--;
//                            v2--;
//                            v4--;
//                            break;
//                        }
//                    }else{
//                        v2--;
//                        v4--;
//                        while(t[v2][v4] != ' '){
//                            v2--;
//                            v4--;
//                        }
//                        v2--;
//                        v4--;
//                        saut = 0;
//                        break;
//                    }
//                }else {
//                    v2--;
//                    v4--;
//                    break;
//                }
//            }
////            if(row == 3 && column == 3)
////                System.out.println("propre nombre = "+nbre);
//            if (nbre < 1 || nbre > number) {
//
//            }else if(nbre == number){
//                boolean flag = false;
//                int m = row, n = column;
//                while(m < v2 && n < v4){
//                    if(t[m][n] != t[m+1][n+1])
//                        flag = true;
//                    m++;
//                    n++;
//                }
//                if(!flag)
//                    infoTab[0][infoTab[0].length-1] += 1;
//            }else{
//                if (logicalXOR(row - 1 < 0 || column - 1 < 0 || ((row-1>=0 && column-1>=0) && t[row- 1][column - 1] == ((player == 1) ? 'O' : 'X')), v2+1 >= t.length || v4+1 >= t.length || ((v2+1<t.length && v4+1<t.length) && t[v2+1][v4+1] == ((player == 1) ? 'O' : 'X')))) {
////                    if(row == 3 && column == 3){
////                System.out.println("ouvert "+(nbre - 1) * 2);
////            }
//                    infoTab[0][(nbre - 1) * 2] += 1;
//                } else if((row - 1 < 0 || column - 1 < 0 || ((row-1>=0 && column-1>=0) && t[row- 1][column - 1] == ((player == 1) ? 'O' : 'X'))) && (v2+1 >= t.length || v4+1 >= t.length || ((v2+1<t.length && v4+1<t.length) && t[v2+1][v4+1] == ((player == 1) ? 'O' : 'X')))){
//                    
//                }else {
//                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//                
//        }
////        if(row == 3 && column == 3){
////            System.out.println("adverse");
////        }
//        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'X' : 'O')) {
////                continue;
////            if(row == 3 && column == 3){
////            System.out.println("pas lui");
////        }
//        }
//        else if ((row-1 >= 0 && column-1 >= 0) && ((t[row - 1][column - 1] == ((player == 1) ? 'O' : 'X')))) {
////            continue;
////            if(row == 3 && column == 3){
////            System.out.println("deja pris");
////        }
//        }else{
//
//            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
//            int deb = 0, fini = 0;
//            int z1 = row-1, z2 = column-1;
//            while (z1 >= 0 && z2 >= 0) {                
//                if(t[z1][z2] != ((player == 1) ? 'X' : 'O')){
//                    deb++;
//                }else{
//                    break;
//                }
//                z1--;
//                z2--;
//            }
//            
//            z1 = row+1;
//            z2 = column+1;
//            while (z1 < t.length && z2 < t[0].length) {                
//                if(t[z1][z2] != ((player == 1) ? 'X' : 'O')){
//                    fini++;
//                }else{
//                    break;
//                }
//                z1++;
//                z2++;
//            }
//            int plage = fini + deb + 1;
////            if(row == 3 && column == 3){
////                System.out.println("row = "+row+" column = "+column);
////                System.out.println("adverse plage = "+plage);
////                System.out.println("fin = "+fini+" debut = "+deb);
////            }
//            if(plage < number){
//                return;
//            }
//            /*Fin de vérification*/
//            
//            
//            int nbre = 1, v1, v2, v3, v4;
//            int saut = 0;
//            for (v1 = row, v2 = row+1, v3 = column, v4 = column+1; v2 < t.length && v4 < t.length;) {
//                if ((t[v1][v3] == t[v2][v4])) {
//                    nbre++;
//                    if(v2+1 < t.length && v4+1 < t.length && ( (t[v2][v4] == t[v2+1][v4+1]) || (t[v2+1][v4+1] == ' ') )){
//                        v1 = v2;
//                        v3 = v4;
//                        v2++;
//                        v4++;
//                    }
//                    else{
//                        break;
//                    }
//                        
//                } else if(t[v2][v4] == ' '){
//                    saut++;
//                    if(saut < 2){
//                        if(v2+1 < t.length && v4+1 < t.length){
//                            if(t[v1][v3] == t[v2+1][v4+1]){
//                                v2++;
//                                v4++;
//                            }else{
//                                saut--;
//                                v2--;
//                                v4--;
//                                break;
//                            }
//                        }else{
//                            saut--;
//                            v2--;
//                            v4--;
//                            break;
//                        }
//                    }else{
//                        v2--;
//                        v4--;
//                        while(t[v2][v4] != ' '){
//                            v2--;
//                            v4--;
//                        }
//                        v2--;
//                        v4--;
//                        saut = 0;
//                        break;
//                    }
//                }else {
//                    v2--;
//                    v4--;
//                    break;
//                }
//            }
////            if(row == 3 && column == 3)
////                System.out.println("adverse nombre = "+nbre);
//            if (nbre < 1 || nbre > number) {
//
//            }else if(nbre == number){
//                boolean flag = false;
//                int m = row, n = column;
//                while(m < v2 && n < v4){
//                    if(t[m][n] != t[m+1][n+1])
//                        flag = true;
//                    m++;
//                    n++;
//                }
//                if(!flag)
//                    infoTab[2][infoTab[0].length-1] += 1;
//            }else{
//                if (logicalXOR(row - 1 < 0 || column - 1 < 0 || ((row-1>=0 && column-1>=0) && t[row- 1][column - 1] == ((player == 1) ? 'X' : 'O')), v2+1 >= t.length || v4+1 >= t.length || ((v2+1<t.length && v4+1<t.length) && t[v2+1][v4+1] == ((player == 1) ? 'X' : 'O')))) {
//                    infoTab[2][(nbre - 1) * 2] += 1;
//                } else if((row - 1 < 0 || column - 1 < 0 || ((row-1>=0 && column-1>=0) && t[row- 1][column - 1] == ((player == 1) ? 'X' : 'O'))) && (v2+1 >= t.length || v4+1 >= t.length || ((v2+1<t.length && v4+1<t.length) && t[v2+1][v4+1] == ((player == 1) ? 'X' : 'O')))){
//                    
//                }else {
//                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//                
//        }
//    }
//    
//    
//    
//
//    private void checkDiagBG(int row, int column, char[][] t) {
//        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'O' : 'X')) {
////                continue;
//        }
//        else if ((row-1 >= 0 && column+1 < t.length) && ((t[row - 1][column + 1] == ((player == 1) ? 'X' : 'O')))) {
////            continue;
//        }else{
//            int nbre = 1, i, j;
//            for (i = row, j = column; i < t.length-1 && j > 0; i++, j--) {
//                if ((t[i][j] != t[i + 1][j - 1]) || t[i + 1][j - 1] == ' ') {
//                    break;
//                } else {
//                    nbre++;
//                }
//            }
//            if (nbre < 1 || nbre >= number) {
//
//            }else{
//                if (logicalXOR(row - 1 < 0 || column + 1 >= t.length || (((row-1)>=0 && (column+1)<t.length) && t[row- 1][column + 1] == ((player == 1) ? 'O' : 'X')), i + 1 >= t.length || j - 1 < 0 || ((i+1<t.length && j-1>=0) && t[i + 1][j - 1] == ((player == 1) ? 'O' : 'X')))) {
//                    infoTab[0][(nbre - 1) * 2] += 1;
//                }else if((row - 1 < 0 || column + 1 >= t.length || (((row-1)>=0 && (column+1)<t.length) && t[row- 1][column + 1] == ((player == 1) ? 'O' : 'X'))) && (i + 1 >= t.length || j - 1 < 0 || ((i+1<t.length && j-1>=0) && t[i + 1][j - 1] == ((player == 1) ? 'O' : 'X')))){
//                    
//                }else {
//                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//                
//        }
//        
//        
//        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'X' : 'O')) {
////                continue;
//        }
//        else if ((row-1 >= 0 && column+1 < t.length) && ((t[row - 1][column + 1] == ((player == 1) ? 'O' : 'X')))) {
////            continue;
//        }else{
//            int nbre = 1, i, j;
//            for (i = row, j = column; i < t.length-1 && j > 0; i++, j--) {
//                if ((t[i][j] != t[i + 1][j - 1]) || t[i + 1][j - 1] == ' ') {
//                    break;
//                } else {
//                    nbre++;
//                }
//            }
//            if (nbre < 1 || nbre >= number) {
//
//            }else{
//                if (logicalXOR(row - 1 < 0 || column + 1 >=t.length || ((row-1>=0 && column+1<t.length) && t[row- 1][column + 1] == ((player == 1) ? 'X' : 'O')), i + 1 >= t.length || j - 1 < 0 || ((i+1<t.length && j-1>=0) && t[i + 1][j - 1] == ((player == 1) ? 'X' : 'O')))) {
//                    infoTab[2][(nbre - 1) * 2] += 1;
//                } else if((row - 1 < 0 || column + 1 >=t.length || ((row-1>=0 && column+1<t.length) && t[row- 1][column + 1] == ((player == 1) ? 'X' : 'O'))) && (i + 1 >= t.length || j - 1 < 0 || ((i+1<t.length && j-1>=0) && t[i + 1][j - 1] == ((player == 1) ? 'X' : 'O')))){
//                    
//                }else {
//                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//                
//        }
//    }
//    
//    
//    
//    private void checkDiagBGs(int row, int column, char[][] t) {
//        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'O' : 'X')) {
////                continue;
//        }
//        else if ((row-1 >= 0 && column+1 < t.length) && ((t[row - 1][column + 1] == ((player == 1) ? 'X' : 'O')))) {
////            continue;
//        }else{
//            
//            
//            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
//            int deb = 0, fini = 0;
////            maboucle:
////            for (int u = row-1; u >= 0; u--) {
////                for (int v = column+1; v < t[0].length; v++) {
////                    if(t[u][v] != ((player == 1) ? 'O' : 'X')){
////                        deb++;
////                    }else{
////                        break maboucle;
////                    }
////                }
////            }
//            int z1 = row-1, z2 = column+1;
//            while (z1 >= 0 && z2 < t[0].length) {                
//                if(t[z1][z2] != ((player == 1) ? 'O' : 'X')){
//                    deb++;
//                }else{
//                    break;
//                }
//                z1--;
//                z2++;
//            }
//            
////            autreboucle:
////            for (int u = row+1; u < t.length; u++) {
////                for (int v = column-1; v <= 0; v--) {
////                    if(t[u][v] != ((player == 1) ? 'O' : 'X')){
////                        fini++;
////                    }else{
////                        break autreboucle;
////                    }
////                }
////            }
//            z1 = row+1;
//            z2 = column-1;
//            while (z1 < t.length && z2 >= 0) {                
//                if(t[z1][z2] != ((player == 1) ? 'O' : 'X')){
//                    fini++;
//                }else{
//                    break;
//                }
//                z1++;
//                z2--;
//            }
//            int plage = fini + deb + 1;
//            if(plage < number)
//                return;
//            /*Fin de vérification*/
//            
//            
////            int nbre = 1, v1, v2, v3, v4;
////            int saut = 0;
////            for (v1 = row, v2 = row+1, v3 = column, v4 = column-1; v2 < t.length && v4 >= 0;) {
////                if ((t[v1][v3] == t[v2][v4])) {
////                    nbre++;
////                    v1 = v2;
////                    v3 = v4;
////                    v2++;
////                    v4--;
////                } else if(t[v2][v4] == ' '){
////                    saut++;
////                    v2++;
////                    v4--;
////                    if(saut == 2){
////                        saut = 0;
////                        break;
////                    }
////                }else {
////                    break;
////                }
////            }
//            int nbre = 1, v1, v2, v3, v4;
//            int saut = 0;
//            for (v1 = row, v2 = row+1, v3 = column, v4 = column-1; v2 < t.length && v4 >= 0;) {
//                if ((t[v1][v3] == t[v2][v4])) {
//                    nbre++;
//                    if(v2+1 < t.length && v4-1 >= 0 && ( (t[v2][v4] == t[v2+1][v4-1]) || (t[v2+1][v4-1] == ' ') )){
//                        v1 = v2;
//                        v3 = v4;
//                        v2++;
//                        v4--;
//                    }
//                    else{
//                        break;
//                    }
//                        
//                } else if(t[v2][v4] == ' '){
//                    saut++;
//                    if(saut < 2){
//                        if(v2+1 < t.length && v4-1 >= 0){
//                            if(t[v1][v3] == t[v2+1][v4-1]){
//                                v2++;
//                                v4--;
//                            }else{
//                                v2--;
//                                v4++;
//                                break;
//                            }
//                        }else{
//                            v2--;
//                            v4++;
//                            break;
//                        }
//                    }else{
//                        v2--;
//                        v4++;
//                        while(t[v2][v4] != ' '){
//                            v2--;
//                            v4++;
//                        }
//                        v2--;
//                        v4++;
//                        break;
//                    }
//                }else {
//                    v2--;
//                    v4++;
//                    break;
//                }
//            }
//            if (nbre < 1 || nbre > number) {
//
//            }else if(nbre == number){
//                boolean flag = false;
//                int m = row, n = column;
//                while(m < v2 && n > 0){
//                    if(t[m][n] != t[m+1][n-1])
//                        flag = true;
//                    m++;
//                    n--;
//                }
//                if(!flag)
//                    infoTab[0][infoTab[0].length-1] += 1;
//            }else{
//                if (logicalXOR(row - 1 < 0 || column + 1 >= t.length || (((row-1)>=0 && (column+1)<t.length) && t[row- 1][column + 1] == ((player == 1) ? 'O' : 'X')), v2+1 >= t.length || v4-1 < 0 || ((v2+1<t.length && v4-1>=0) && t[v2+1][v4-1] == ((player == 1) ? 'O' : 'X')))) {
//                    infoTab[0][(nbre - 1) * 2] += 1;
//                } else if((row - 1 < 0 || column + 1 >= t.length || (((row-1)>=0 && (column+1)<t.length) && t[row- 1][column + 1] == ((player == 1) ? 'O' : 'X'))) && (v2+1 >= t.length || v4-1 < 0 || ((v2+1<t.length && v4-1>=0) && t[v2+1][v4-1] == ((player == 1) ? 'O' : 'X')))){
//                    
//                }else {
//                    infoTab[0][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//                
//        }
//        
//        
//        if (t[row][column] == ' ' || t[row][column] == ((player == 1) ? 'X' : 'O')) {
////                continue;
//        }
//        else if ((row-1 >= 0 && column+1 < t.length) && ((t[row - 1][column + 1] == ((player == 1) ? 'O' : 'X')))) {
////            continue;
//        }else{
//            
//            /*Vérifie qu'on peut avoir n pieces dans cet alignement*/
//            int deb = 0, fini = 0;
//            int z1 = row-1, z2 = column+1;
//            while (z1 >= 0 && z2 < t[0].length) {                
//                if(t[z1][z2] != ((player == 1) ? 'X' : 'O')){
//                    deb++;
//                }else{
//                    break;
//                }
//                z1--;
//                z2++;
//            }
//            
//            z1 = row+1;
//            z2 = column-1;
//            while (z1 < t.length && z2 >= 0) {                
//                if(t[z1][z2] != ((player == 1) ? 'X' : 'O')){
//                    fini++;
//                }else{
//                    break;
//                }
//                z1++;
//                z2--;
//            }
//            int plage = fini + deb + 1;
//            if(plage < number)
//                return;
//            /*Fin de vérification*/
//            
//            
////            int nbre = 1, v1, v2, v3, v4;
////            int saut = 0;
////            for (v1 = row, v2 = row+1, v3 = column, v4 = column-1; v2 < t.length && v4 >= 0;) {
////                if ((t[v1][v3] == t[v2][v4])) {
////                    nbre++;
////                    v1 = v2;
////                    v3 = v4;
////                    v2++;
////                    v4--;
////                } else if(t[v2][v4] == ' '){
////                    saut++;
////                    v2++;
////                    v4--;
////                    if(saut == 2){
////                        saut = 0;
////                        break;
////                    }
////                }else {
////                    break;
////                }
////            }
//            int nbre = 1, v1, v2, v3, v4;
//            int saut = 0;
//            for (v1 = row, v2 = row+1, v3 = column, v4 = column-1; v2 < t.length && v4 >= 0;) {
//                if ((t[v1][v3] == t[v2][v4])) {
//                    nbre++;
//                    if(v2+1 < t.length && v4-1 >= 0 && ( (t[v2][v4] == t[v2+1][v4-1]) || (t[v2+1][v4-1] == ' ') )){
//                        v1 = v2;
//                        v3 = v4;
//                        v2++;
//                        v4--;
//                    }
//                    else{
//                        break;
//                    }
//                        
//                } else if(t[v2][v4] == ' '){
//                    saut++;
//                    if(saut < 2){
//                        if(v2+1 < t.length && v4-1 >= 0){
//                            if(t[v1][v3] == t[v2+1][v4-1]){
//                                v2++;
//                                v4--;
//                            }else{
//                                v2--;
//                                v4++;
//                                break;
//                            }
//                        }else{
//                            v2--;
//                            v4++;
//                            break;
//                        }
//                    }else{
//                        v2--;
//                        v4++;
//                        while(t[v2][v4] != ' '){
//                            v2--;
//                            v4++;
//                        }
//                        v2--;
//                        v4++;
//                        break;
//                    }
//                }else {
//                    v2--;
//                    v4++;
//                    break;
//                }
//            }
//            if (nbre < 1 || nbre > number) {
//
//            }else if(nbre == number){
//                boolean flag = false;
//                int m = row, n = column;
//                while(m < v2 && n > 0){
//                    if(t[m][n] != t[m+1][n-1])
//                        flag = true;
//                    m++;
//                    n--;
//                }
//                if(!flag)
//                    infoTab[2][infoTab[0].length-1] += 1;
//            }else{
//                if (logicalXOR(row - 1 < 0 || column + 1 >=t.length || ((row-1>=0 && column+1<t.length) && t[row- 1][column + 1] == ((player == 1) ? 'X' : 'O')), v2+1 >= t.length || v4-1 < 0 || ((v2+1<t.length && v4-1>=0) && t[v2+1][v4-1] == ((player == 1) ? 'X' : 'O')))) {
//                    infoTab[2][(nbre - 1) * 2] += 1;
//                } else if((row - 1 < 0 || column + 1 >=t.length || ((row-1>=0 && column+1<t.length) && t[row- 1][column + 1] == ((player == 1) ? 'X' : 'O'))) && (v2+1 >= t.length || v4-1 < 0 || ((v2+1<t.length && v4-1>=0) && t[v2+1][v4-1] == ((player == 1) ? 'X' : 'O')))){
//                    
//                }else {
//                    infoTab[2][(nbre - 1) * 2 + 1] += 1;
//                }
//            }
//                
//        }
//    }
    private boolean logicalXOR(boolean x, boolean y) {
        return ((x || y) && !(x && y));
    }

}
